trigger:
  branches:
    include:
      - main

variables:
  containerAppName: blue-green-app
  resourceGroup: RG-Devansh-POC
  location: Canada Central
  demoImage: azurespringapp.azurecr.io/bluegreen/page2:latest
  revisionSuffix: green-$(Build.BuildId)
  azureSub: RG-Devansh-POC-0041

stages:
- stage: DeployGreen
  jobs:
  - job: DeployGreenRevision
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying new Green revision..."
          az containerapp update \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --image ${{ variables.demoImage }} \
            --revision-suffix ${{ variables.revisionSuffix }}
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
           az containerapp revision label add \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroup) \
                  --revision ${{ variables.containerAppName }}--${{ variables.revisionSuffix }} \
                  --label green

- stage: Validate
  dependsOn: DeployGreen
  jobs:
  - job: SmokeTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Smoke testing Green revision..."
        # Optionally curl using known URL with revision header/query param if enabled
        echo "Test passed."

- stage: SwitchTraffic
  dependsOn: Validate
  jobs:
  - job: Set100PercentToGreen
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          greenRev=$(az containerapp revision list \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --query "[?contains(name, '${{ variables.revisionSuffix }}')].name" \
            -o tsv)

          echo "Shifting 100% traffic to revision: $greenRev"

          az containerapp ingress traffic set \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --revision-weight $greenRev=100
- stage: LabelCurrentBlue
  dependsOn: Validate
  jobs:
  - job: LabelCurrentBlueRevision
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting current active revision..."
          currentRev=$(az containerapp show \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --query "properties.configuration.ingress.traffic[?weight==\`100\`].revisionName" \
            -o tsv)

          echo "Current live revision is: $currentRev"

          if [[ -n "$currentRev" ]]; then
            echo "Tagging it as 'blue'"
            az containerapp revision label add \
              --name ${{ variables.containerAppName }} \
              --resource-group ${{ variables.resourceGroup }} \
              --revision $currentRev \
              --label blue
          fi

- stage: Cleanup
  dependsOn: SwitchTraffic
  jobs:
    - job: DeactivateUnlabeledRevisions
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ variables.azureSub }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Fetching all revisions..."
              allRevs=$(az containerapp revision list \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --query "[].name" -o tsv)

              echo "Getting all revision labels..."
              labeledRevs=$(az containerapp revision list \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --query "[?labels.green=='true' || labels.blue=='true'].name" -o tsv)

              echo "Labeled revisions (green/blue):"
              echo "$labeledRevs"

              for rev in $allRevs; do
                if echo "$labeledRevs" | grep -q "^$rev$"; then
                  echo "‚úÖ Keeping labeled revision: $rev"
                else
                  echo "üóëÔ∏è Deactivating unlabeled revision: $rev"
                  az containerapp revision deactivate \
                    --name ${{ variables.containerAppName }} \
                    --resource-group ${{ variables.resourceGroup }} \
                    --revision $rev
                fi
              done


- stage: GreenBlue
  dependsOn: Cleanup
  jobs:
    - job: ChangingGreenToBlue
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ variables.azureSub }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az containerapp revision label add \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --revision ${{ variables.containerAppName }}--${{ variables.revisionSuffix }} \
            --label blue