trigger:
  branches:
    include:
      - main

variables:
  containerAppName: blue-green-app
  resourceGroup: RG-Devansh-POC
  location: Canada Central
  demoImage: azurespringapp.azurecr.io/bluegreen/page2:latest
  revisionSuffix: green-$(Build.BuildId)
  azureSub: RG-Devansh-POC-0041

stages:
- stage: DeployGreen
  jobs:
  - job: DeployGreenRevision
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying new Green revision..."
          az containerapp update \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --image ${{ variables.demoImage }} \
            --revision-suffix ${{ variables.revisionSuffix }}
          az containerapp revision label add \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --revision ${{ variables.containerAppName }}--${{ variables.revisionSuffix }} \
            --label green
      
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az containerapp revision label add \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --revision ${{ variables.containerAppName }}--${{ variables.revisionSuffix }} \
            --label green
      

- stage: Validate
  dependsOn: DeployGreen
  jobs:
  - job: SmokeTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Smoke testing Green revision..."
        # Optionally curl using known URL with revision header/query param if enabled
        echo "Test passed."

- stage: SwitchTraffic
  dependsOn: Validate
  jobs:
  - job: Set100PercentToGreen
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          greenRev=$(az containerapp revision list \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --query "[?contains(name, '${{ variables.revisionSuffix }}')].name" \
            -o tsv)

          echo "Shifting 100% traffic to revision: $greenRev"

          az containerapp ingress traffic set \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --revision-weight $greenRev=100

- stage: Cleanup
  dependsOn: SwitchTraffic
  condition: succeeded()
  jobs:
  - job: CleanupOldRevisions
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: ${{ variables.azureSub }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Fetching revisions labeled 'blue' or 'green'..."
          LABELLED_REVISIONS=$(az containerapp show \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --query "properties.configuration.ingress.traffic[?label=='blue'||label=='green'].revisionName" \
            -o tsv)

          echo "Fetching all revisions..."
          ALL_REVISIONS=$(az containerapp revision list \
            --name ${{ variables.containerAppName }} \
            --resource-group ${{ variables.resourceGroup }} \
            --query "[].name" \
            -o tsv)

          echo "Deactivating old revisions..."
          for REVISION in $ALL_REVISIONS; do
            if [[ ! " $LABELLED_REVISIONS " =~ " $REVISION " ]]; then
              echo "Deactivating: $REVISION"
              az containerapp revision deactivate \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --revision "$REVISION"
            fi
          done

          echo "Cleanup complete."