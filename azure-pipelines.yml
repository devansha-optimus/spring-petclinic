trigger:
  branches:
    include:
      - main

variables:
  containerAppName: blue-green-app
  resourceGroup: RG-Devansh-POC
  location: Canada Central
  demoImage: azurespringapp.azurecr.io/bluegreen/page2:latest
  azureSub: RG-Devansh-POC-0041

stages:
- stage: DetermineLabels
  jobs:
  - job: DetectLabel
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      name: SetRevisionLabels
      inputs:
        azureSubscription: $(azureSub)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Detecting current active label..."
          currentLabel="green"
          newLabel="blue"

          if az containerapp revision label show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --label blue >/dev/null 2>&1; then
            currentLabel="blue"
            newLabel="green"
          fi

          echo "##vso[task.setvariable variable=currentLabel]$currentLabel"
          echo "##vso[task.setvariable variable=newLabel]$newLabel"

- stage: DeployNewRevision
  dependsOn: DetermineLabels
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSub)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          revisionName=$(containerAppName)--$(newLabel)-$(Build.BuildId)
          echo "Deploying revision: $revisionName"

          az containerapp update \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --image $(demoImage) \
            --revision-suffix $(newLabel)-$(Build.BuildId)

          az containerapp revision label add \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --revision $revisionName \
            --label $(newLabel)

- stage: ShiftTraffic50
  dependsOn: DeployNewRevision
  jobs:
  - job: TrafficHalf
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSub)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          oldRev=$(az containerapp revision label show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --label $(currentLabel) \
            --query name -o tsv)

          newRev=$(az containerapp revision label show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --label $(newLabel) \
            --query name -o tsv)

          echo "Splitting traffic 50/50 between $oldRev and $newRev"

          az containerapp ingress traffic set \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --revision-weight $oldRev=50 $newRev=50

- stage: Validate
  dependsOn: ShiftTraffic50
  jobs:
  - job: SmokeTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Smoke testing new revision..."
        echo "Test passed."

- stage: ShiftTraffic100
  dependsOn: Validate
  jobs:
  - job: ShiftAll
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSub)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          newRev=$(az containerapp revision label show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --label $(newLabel) \
            --query name -o tsv)

          echo "Shifting 100% traffic to $newRev"

          az containerapp ingress traffic set \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --revision-weight $newRev=100

- stage: Cleanup
  dependsOn: ShiftTraffic100
  jobs:
  - job: DeactivateOldRevisions
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSub)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting revisions with traffic..."
          activeRevs=$(az containerapp show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --query "properties.configuration.ingress.traffic[?weight > \`0\`].revisionName" -o tsv)

          echo "Getting all revisions..."
          allRevs=$(az containerapp revision list \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --query "[].name" -o tsv)

          echo "Getting labeled revisions..."
          greenRev=$(az containerapp revision label show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --label green --query name -o tsv 2>/dev/null || echo "")

          blueRev=$(az containerapp revision label show \
            --name $(containerAppName) \
            --resource-group $(resourceGroup) \
            --label blue --query name -o tsv 2>/dev/null || echo "")

          for rev in $allRevs; do
            if echo "$activeRevs" | grep -q "$rev" || [ "$rev" = "$greenRev" ] || [ "$rev" = "$blueRev" ]; then
              echo "Keeping revision: $rev"
            else
              echo "Deactivating revision: $rev"
              az containerapp revision deactivate \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --revision $rev
            fi
          done
