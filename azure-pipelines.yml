name: 'oci-image-builder'

trigger: none  # Triggered by pipeline completion below

resources:
  pipelines:
    - pipeline: buildWarPipeline
      source: devansha-optimus.spring-petclinic-buildwar  # Replace with your WAR pipeline name
      trigger: true

variables:
  ACR_NAME: azurespringapp
  ACR_LOGIN_SERVER: azurespringapp.azurecr.io
  IMAGE_NAME: springboot-app
  BUILDER: azurespringapp.azurecr.io/azure-spring-builder:latest
  AZURE_SERVICE_CONNECTION: 'RG-Devansh-POC-0041'

pool:
  vmImage: ubuntu-latest

jobs:
- job: BuildScanPushOCI
  displayName: 'Build, Scan and Push OCI Image'
  steps:

    - download: buildWarPipeline
      artifact: springboot-war

    - script: |
        echo "Downloading pack CLI v0.32.0..."
        curl -sSL -o pack.tgz https://github.com/buildpacks/pack/releases/download/v0.32.0/pack-v0.32.0-linux.tgz
        tar -xzf pack.tgz
        sudo mv pack /usr/local/bin/
      displayName: 'Install pack CLI'

    - task: AzureCLI@2
      displayName: 'Login to ACR'
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $ACR_NAME

    - script: |
        echo "Finding WAR file..."
        WAR_FILE=$(find $(Pipeline.Workspace)/buildWarPipeline/springboot-war -name "*.war" | head -n 1)
        echo "WAR file located: $WAR_FILE"

        VERSION=$(basename "$WAR_FILE" | sed -E 's/^.*-([0-9]+\.[0-9]+)\.war$/\1/')
        echo "Extracted version: $VERSION"
        echo "##vso[task.setvariable variable=IMAGE_VERSION]$VERSION"

        echo "Building OCI image locally using Paketo Buildpacks..."
        pack build $ACR_LOGIN_SERVER/$IMAGE_NAME:$VERSION \
          --path $WAR_FILE \
          --builder $BUILDER \
          --pull-policy if-not-present
      displayName: 'Build image locally and extract version'

    - task: Trivy@1
      displayName: 'Scan OCI image with Trivy and export reports'
      inputs:
        image: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_VERSION)'
        format: 'json'
        output: 'trivy-report.json'
        severity: 'CRITICAL,HIGH'
        # exitCode: '1'
        ignoreUnfixed: true

    - task: Trivy@1
      displayName: 'Generate SARIF report'
      inputs:
        image: '$(ACR_LOGIN_SERVER)/$(IMAGE_NAME):$(IMAGE_VERSION)'
        format: 'sarif'
        output: 'trivy-report.sarif'
        severity: 'CRITICAL,HIGH'
        exitCode: '0'  # Do not fail here; fail only on JSON scan above
        ignoreUnfixed: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Trivy Reports'
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)'
        artifactName: 'trivy-reports'
        publishLocation: 'Container'
    - task: AzureCLI@2
      displayName: 'Push image to ACR'
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Pushing image to ACR..."
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:$(IMAGE_VERSION)
