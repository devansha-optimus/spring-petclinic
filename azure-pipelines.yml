trigger:
  branches:
    include:
      - main

variables:
  containerAppName: blue-green-app
  resourceGroup: RG-Devansh-POC
  location: Canada Central
  demoImage: azurespringapp.azurecr.io/bluegreen/page2:latest
  azureSub: RG-Devansh-POC-0041

stages:

# 1. Detect Current Label and Deploy Opposite
- stage: DeployNewRevision
  jobs:
    - job: DeployRevisionWithLabel
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          name: DetectCurrentLabel
          inputs:
            azureSubscription: ${{ variables.azureSub }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Detecting current active label..."
              currentLabel=$(az containerapp revision list \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --query "[?trafficWeight > \`0\`].labels | [0]" \
                -o json | jq -r 'keys[]' || echo "")

              if [[ "$currentLabel" == "green" ]]; then
                newLabel="blue"
              else
                newLabel="green"
              fi

              revisionSuffix="${newLabel}-${BUILD_BUILDID}"

              echo "Using new label: $newLabel"
              echo "##vso[task.setvariable variable=newLabel]$newLabel"
              echo "##vso[task.setvariable variable=revisionSuffix]$revisionSuffix"

        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ variables.azureSub }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Deploying new revision: ${{ variables.containerAppName }}--$(revisionSuffix)"
              az containerapp update \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --image ${{ variables.demoImage }} \
                --revision-suffix $(revisionSuffix)

              echo "Assigning label $(newLabel) to revision"
              az containerapp revision label add \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --revision ${{ variables.containerAppName }}--$(revisionSuffix) \
                --label $(newLabel)

# 2. Optional Smoke Test
- stage: Validate
  dependsOn: DeployNewRevision
  jobs:
    - job: SmokeTest
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: |
            echo "Running smoke tests against new revision with label: $(newLabel)"
            # Example: curl -H "label: $(newLabel)" https://your-app-url
            echo "Test passed."

- stage: SwitchTraffic
  dependsOn: Validate
  jobs:
    - job: RouteTrafficToGreenOrBlue
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ variables.azureSub }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Checking current 'blue' and 'green' revision labels..."

              blueRev=$(az containerapp revision label show \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --label blue \
                --query "name" -o tsv || echo "")

              greenRev=$(az containerapp revision label show \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --label green \
                --query "name" -o tsv || echo "")

              echo "üîµ Blue Revision: $blueRev"
              echo "üü¢ Green Revision: $greenRev"

              if [[ -z "$greenRev" ]]; then
                echo "‚ùå ERROR: Green revision label not found!"
                exit 1
              fi

              echo "‚úÖ Routing 100% traffic to: $greenRev"

              az containerapp ingress traffic set \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --revision-weight $greenRev=100

# 4. Cleanup Revisions without 'blue' or 'green' Label
- stage: Cleanup
  dependsOn: SwitchTraffic
  jobs:
    - job: DeactivateUnlabeledRevisions
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          inputs:
            azureSubscription: ${{ variables.azureSub }}
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "Listing all revisions..."
              allRevs=$(az containerapp revision list \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --query "[].name" -o tsv)

              echo "Fetching revisions with blue/green labels..."
              labeledRevs=$(az containerapp revision list \
                --name ${{ variables.containerAppName }} \
                --resource-group ${{ variables.resourceGroup }} \
                --query "[?labels.green=='true' || labels.blue=='true'].name" -o tsv)

              for rev in $allRevs; do
                if echo "$labeledRevs" | grep -q "^$rev$"; then
                  echo "‚úÖ Keeping labeled revision: $rev"
                else
                  echo "üóëÔ∏è Deactivating unlabeled revision: $rev"
                  az containerapp revision deactivate \
                    --name ${{ variables.containerAppName }} \
                    --resource-group ${{ variables.resourceGroup }} \
                    --revision $rev
                fi
              done
