# File: templates/releaseByModule.yaml
parameters:
  - name: projectName
    type: string
  - name: repoName
    type: string
  - name: branchName
    type: string
  - name: module
    type: string
  - name: relVersion
    type: string
  - name: jobName
    type: string

jobs:
- job: ${{ parameters.jobName }}_BuildRelease
  displayName: '${{ parameters.jobName }}-build-release'
  continueOnError: false
  variables:
    # Precompute sanitized module name to use in artifact name (replace '.' with 'root' and '/' with '_')
    sanitizedModuleName: ${{ replace(replace(parameters.module, '.', 'root'), '/', '_') }}

  steps:
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_8_X64)"
        echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_8_X64)\bin;$(PATH)"

  - template: ${{ variables['System.DefaultWorkingDirectory'] }}/templates/agf2-buildSettings.yml@templates 

  - checkout: git://${{ parameters.projectName }}/${{ parameters.repoName }}@${{ parameters.branchName }}
    path: s

  - task: Bash@3
    displayName: get parentPOM
    name: parentPOMName
    inputs:
      targetType: inline
      script: |
        dirs=`find "$(System.DefaultWorkingDirectory)/" -type d -name "*[Pp]arentPOM*"`
        echo "--dir  $dirs"
        parent=$(basename $dirs)
        echo "--parent  $parent"
        echo "##vso[task.setvariable variable=PARENT_POM;isOutput=true]$parent"

  - ${{ if eq(parameters.relVersion, ' ') }}:
    - task: Bash@3
      name: projectVersion
      inputs:
        targetType: inline
        workingDirectory: $(System.DefaultWorkingDirectory)/$(parentPOMName.PARENT_POM)
        script: |
          pomver=$(sed  '/<parent>/,/<\/parent>/d' pom.xml | sed  '/dependencies>/,/<\/dependencies>/d' | sed '/<build>/,/<\/build>/d' | sed '/<properties>/,/<\/properties>/d' |sed '/<dependencyManagement>/,/<\/dependencyManagement>/d' |grep '<version>'| awk -F'[<>]' '{print $3}')
          pomrev=$(sed -n -e '/<properties>/,/<\/properties>/s/ *<\([^>]*\)>\([^<]*\)<.*$/\1=\2/p' pom.xml |grep revision | awk -F'=' '{print $2}' | awk -F'-' '{print $1}')
          if [[ $pomver != "\${revision}" ]]; then
            currentVer=$(echo "$pomver" | awk -F'-' '{print $1}')
          else
            currentVer=$pomrev
          fi
          echo "currentVer, $currentVer"
          newVer=$(echo $currentVer | awk -F'.' -v OFS="." '{$NF=$NF+1; print $0}')
          echo "new version: $newVer"
          echo "##vso[task.setvariable variable=FUTURE_VERSION;isOutput=true]$newVer"
          cv=$(echo $currentVer | awk -F'-' '{print $1}')
          echo "##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]$cv"

  - ${{ if ne(parameters.relVersion, ' ') }}:
    - task: Bash@3
      name: projectVersion
      inputs:
        targetType: inline
        workingDirectory: $(System.DefaultWorkingDirectory)/$(parentPOMName.PARENT_POM)
        script: |
          echo "releaseVersion: ${{ parameters.relVersion }}"
          temp="${{ parameters.relVersion }}"
          nv=$(echo $temp | xargs echo -n)
          newVer=$(echo $nv | awk -F'.' '{print $1"."($2 + 1)}')
          echo "##vso[task.setvariable variable=FUTURE_VERSION;isOutput=true]$newVer"
          echo "##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]$nv"

  - task: Bash@3
    displayName: Package release artifact
    name: packageRelease
    inputs:
      targetType: inline
      script: |
        echo "${{ parameters.module }}"
        if [[ ! -z "$(parentPOMName.PARENT_POM)" ]]; then
          mvn clean package -f $(parentPOMName.PARENT_POM)/pom.xml --settings $(Agent.TempDirectory)/settings3.xml --projects ":${{ parameters.module }}" -Drevision=$(projectVersion.RELEASE_VERSION) -Drepo_release_id=$(repo_release_id) -Drepo_release_url=$(repo_release_url) -Daccess_token=$(System.AccessToken)
        else
          mvn clean package -f ./pom.xml --settings $(Agent.TempDirectory)/settings3.xml --projects ":${{ parameters.module }}" -Drevision=$(projectVersion.RELEASE_VERSION) -Drepo_release_id=$(repo_release_id) -Drepo_release_url=$(repo_release_url) -Daccess_token=$(System.AccessToken)
        fi
        if [ $? -eq 0 ]; then
          echo "Successfully packed"
        else
          echo "Package failed"
          exit 1
        fi

  - template: ${{ variables['System.DefaultWorkingDirectory'] }}/templates/agf2-publishByModule.yml@templates
    parameters:
      module: ${{ parameters.module }}

  - task: Bash@3
    displayName: Deploy release artifact
    name: deployRelease
    continueOnError: false
    inputs:
      targetType: inline
      script: |
        echo "${{ parameters.module }}"
        if [[ ! -z "$(parentPOMName.PARENT_POM)" ]]; then
          mvn deploy -f $(parentPOMName.PARENT_POM)/pom.xml -Psbom --settings $(Agent.TempDirectory)/settings3.xml --projects ":${{ parameters.module }}" -Drevision=$(projectVersion.RELEASE_VERSION) -Drepo_release_id=$(repo_release_id) -Drepo_release_url=$(repo_release_url) -Daccess_token=$(System.AccessToken)
        else
          mvn deploy -f ./pom.xml -Psbom --settings $(Agent.TempDirectory)/settings3.xml --projects ":${{ parameters.module }}" -Drevision=$(projectVersion.RELEASE_VERSION) -Drepo_release_id=$(repo_release_id) -Drepo_release_url=$(repo_release_url) -Daccess_token=$(System.AccessToken)
        fi
        if [ $? -eq 0 ]; then
          echo "Successfully Deployed"
        else
          echo "Deploy failed"
          exit 1
        fi
